/// <reference types="googlemaps" />
import { EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { GermanAddress } from '../../interfaces';
import { Appearance } from '../mat-google-maps-autocomplete.component';
import * as i0 from "@angular/core";
export declare class MatSearchGoogleMapsAutocompleteComponent implements OnInit, ControlValueAccessor {
    private formBuilder;
    constructor(formBuilder: UntypedFormBuilder);
    searchBarAppearance: string | Appearance;
    appearance: string | Appearance;
    searchAddressLabel: string;
    streetNameLabel: string;
    streetNumberLabel: string;
    postalCodeLabel: string;
    localityLabel: string;
    vicinityLabel: string;
    showVicinity: boolean;
    country: string | string[];
    placeIdOnly?: boolean;
    strictBounds?: boolean;
    types?: string[];
    type?: string;
    readonly: boolean;
    disableSearch: boolean;
    private _value;
    onGermanAddressMapped: EventEmitter<GermanAddress>;
    germanAddress: GermanAddress;
    addressFormGroup: UntypedFormGroup;
    firstInit: boolean;
    private _unsubscribeAll;
    propagateChange: (_: any) => void;
    get value(): GermanAddress;
    set value(value: GermanAddress);
    ngOnInit(): void;
    createAddressFormGroup(): void;
    enableCustomInput(): void;
    parseDisplayAddress(): string;
    syncAutoComplete($event: google.maps.places.PlaceResult): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MatSearchGoogleMapsAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MatSearchGoogleMapsAutocompleteComponent, "mat-search-google-maps-autocomplete", never, { "searchBarAppearance": { "alias": "searchBarAppearance"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "searchAddressLabel": { "alias": "searchAddressLabel"; "required": false; }; "streetNameLabel": { "alias": "streetNameLabel"; "required": false; }; "streetNumberLabel": { "alias": "streetNumberLabel"; "required": false; }; "postalCodeLabel": { "alias": "postalCodeLabel"; "required": false; }; "localityLabel": { "alias": "localityLabel"; "required": false; }; "vicinityLabel": { "alias": "vicinityLabel"; "required": false; }; "showVicinity": { "alias": "showVicinity"; "required": false; }; "country": { "alias": "country"; "required": false; }; "placeIdOnly": { "alias": "placeIdOnly"; "required": false; }; "strictBounds": { "alias": "strictBounds"; "required": false; }; "types": { "alias": "types"; "required": false; }; "type": { "alias": "type"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "disableSearch": { "alias": "disableSearch"; "required": false; }; "_value": { "alias": "_value"; "required": false; }; "value": { "alias": "value"; "required": false; }; }, { "onGermanAddressMapped": "onGermanAddressMapped"; }, never, never, false, never>;
}
